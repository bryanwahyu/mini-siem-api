// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/decisions": {
            "get": {
                "description": "Returns recent decisions (max 100)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "decisions"
                ],
                "summary": "List decisions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server-analyst_internal_domain_entities.Decision"
                            }
                        }
                    }
                }
            }
        },
        "/decisions/block": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Blocks an IP address via action adapters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "decisions"
                ],
                "summary": "Block IP",
                "parameters": [
                    {
                        "description": "Block request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_interfaces_httpapi.DecisionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/decisions/unblock": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unblocks an IP address via action adapters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "decisions"
                ],
                "summary": "Unblock IP",
                "parameters": [
                    {
                        "description": "Unblock request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_interfaces_httpapi.DecisionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/detections": {
            "get": {
                "description": "Returns recent detections (max 100). \"where\" info is in Metadata (JSON: ip, path, host, source)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "detections"
                ],
                "summary": "List detections",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "max rows",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "rows to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by IP",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by host",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by source",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by rule",
                        "name": "rule",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339 from time",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339 to time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server-analyst_internal_domain_entities.Detection"
                            }
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Returns recent events (max 100)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/server-analyst_internal_domain_entities.Event"
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns service health",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_interfaces_httpapi.DecisionRequest": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "server-analyst_internal_domain_entities.Decision": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "block, unblock",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "until": {
                    "type": "string"
                }
            }
        },
        "server-analyst_internal_domain_entities.Detection": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "event_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "metadata": {
                    "description": "JSON string",
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "server-analyst_internal_domain_entities.Event": {
            "type": "object",
            "properties": {
                "bytes": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "raw": {
                    "description": "raw log line",
                    "type": "string"
                },
                "referrer": {
                    "type": "string"
                },
                "source": {
                    "description": "file path or journald unit",
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "ua": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Server-Analyst API",
	Description:      "Threat detection & decision API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
